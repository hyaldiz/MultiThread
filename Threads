
#include <unistd.h>   sleep vb fonksiyonlar için
#include <pthreads.h> thread fonksiyonları için


1-) THREAD OLUŞTURMA

*-* int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg); 
       --> Thread oluşturmamızı sağlar.

	NOT: Threadlerin stackleri farklıdır.
	
2-) THREAD ID'LERININ ALINMASI

*-* pthread_t pthread_self(void);   -> Çağrıldığı thread'te thread'in id'sini döndürür
	
	örn;
	pthread_t tid1 = pthread_self(void);
	
	zaten task create yapılırken arguman olarak verilen &id'yle aynı
	main'inde thread id si vardır.

3-) THREAD SONLANDIRMA

	-->Process'i sonlandırırsak tüm threadler sonlanır.
	-->exit() kullanılarak process sonlanacağından thredler de sonlanacaktır.
	   Return le sonlandırılabilir ve BUNA THREAD'IN EXIT KODU DENIR. Bir Thread diğer thread'i
	   sonlandırabilir.
        -->pthread_exit(); fonksiyonu ile sonlandırılabilir.

*-* void pthread_exit(void *retval);

	örn; pthread_exit((void*)123);
	
	örn; return (void*)450; (thredin return kısmına)
	
	örn; exit(...); (direk process sonlanır duruma göre istediğin yerde kullan)
	
4-) BIR THREAD'IN BAŞKA BİR THREAD'İ SONLANDIRMASI

	*-* int pthread_cancel(pthread_t thread); (thred'i sonlandırma istediğinde bulunur. Kesin sonlandıracak diye bir durum yok)
		->Başarı durumunda 0 döndürür.
		
		örn; herhangi bir thread'e ait id = thd1_id
		
		pthread_cancel(thd1_id);
		
		NOT: printf vb cancelation point göremezse thread'i sonlandırmaz!!!!!!
		     mesela programda uzun bir döngünün içne null statement koyduk altına join koyduk ama thread sonlanmadı. CANCELATION POINT GORMESI LAZIM.
		     
		 GOOGLE'DA pthread_cancel() FONKSIYONUNU ARATARAK BU CANCELATION POINTS FONKSIYONLARINA BAKABILIRSIN.
		 
		 
 5-) THREADLERIN BEKLETILMESI VE DETACH DURUMU
 
 	 --> pthread_join yazıldığı yerde thread'in bitmesini bekler ve thread bitince devam eder. Akışı yazıldığı yere sabitler.
 	 
 	 *-* int pthread_join(pthread_t thread , void **retval);  //2. parametreyle thread'in geri dönüş değerini alabiliriz.
 	     başarı durumunda 0 başarısızlık durumunda non-zero bir değer döndürür. 
 	     
 	     örn; pthread_join(tid1,NULL); //thread joinden sonra biter ve cpu zamanı harcamaz
 	     
 	     NOT: pointer to pointer demek bir pointer'in adresini istiyor demek.
 	     
 	     örn; void *thread_exit_code;
 	     
 	     pthread_join(tid1,&thread_exit_code);
 	     printf("worker thread exit code:%p\n",thread_exit_code);
 	     
 	     
 	     
	NOT:BIR THREAD BAŞKA BIR THREADI SONLANDIRIRSA pthread_cancel'la ""PTHREAD_CANCELED"" MACROSU SET OLUR VE BU MACROYU KULLANARAK TESPIT YAPABILIRIZ. (-1) thread'in döönüş değeri -1 olur ce macroda -1'e setlenir!!!
		
		pthread_cancel(thd_id_x);	//kullanılırsa  1'e kullanılmazsa 2
	
	     if(thread_exit_code == PTHREAD_CANCELED)
	     	printf("with pthread_canceled\n");		//1
     	     else
     	     	printf("without pthread_cancel\n");		//2
