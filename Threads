
#include <unistd.h>   sleep vb fonksiyonlar için
#include <pthreads.h> thread fonksiyonları için


1-) THREAD OLUŞTURMA

*-* int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg); 
       --> Thread oluşturmamızı sağlar.

	NOT: Threadlerin stackleri farklıdır.
	
2-) THREAD ID'LERININ ALINMASI

*-* pthread_t pthread_self(void);   -> Çağrıldığı thread'te thread'in id'sini döndürür
	
	örn;
	pthread_t tid1 = pthread_self(void);
	
	zaten task create yapılırken arguman olarak verilen &id'yle aynı
	main'inde thread id si vardır.

3-) THREAD SONLANDIRMA

	-->Process'i sonlandırırsak tüm threadler sonlanır.
	-->exit() kullanılarak process sonlanacağından thredler de sonlanacaktır.
	   Return le sonlandırılabilir ve BUNA THREAD'IN EXIT KODU DENIR. Bir Thread diğer thread'i
	   sonlandırabilir.
        -->pthread_exit(); fonksiyonu ile sonlandırılabilir.

*-* void pthread_exit(void *retval);

	örn; pthread_exit((void*)123);
	
	örn; return (void*)450; (thredin return kısmına)
	
	örn; exit(...); (direk process sonlanır duruma göre istediğin yerde kullan)
	
4-) BIR THREAD'IN BAŞKA BİR THREAD'İ SONLANDIRMASI

	*-* int pthread_cancel(pthread_t thread); (thred'i sonlandırma istediğinde bulunur. Kesin sonlandıracak diye bir durum yok)
		->Başarı durumunda 0 döndürür.
		
		örn; herhangi bir thread'e ait id = thd1_id
		
		pthread_cancel(thd1_id);
		
		NOT: printf vb cancelation point göremezse thread'i sonlandırmaz!!!!!!
		     mesela programda uzun bir döngünün içne null statement koyduk altına join koyduk ama thread sonlanmadı. CANCELATION POINT GORMESI LAZIM.
		     
		 GOOGLE'DA pthread_cancel() FONKSIYONUNU ARATARAK BU CANCELATION POINTS FONKSIYONLARINA BAKABILIRSIN.
		 
		 
 5-) THREADLERIN BEKLETILMESI VE DETACH DURUMU
 
 	 --> pthread_join yazıldığı yerde thread'in bitmesini bekler ve thread bitince devam eder. Akışı yazıldığı yere sabitler.
 	 
 	 *-* int pthread_join(pthread_t thread , void **retval);  //2. parametreyle thread'in geri dönüş değerini alabiliriz.
 	     başarı durumunda 0 başarısızlık durumunda non-zero bir değer döndürür. 
 	     
 	     örn; pthread_join(tid1,NULL); //thread joinden sonra biter ve cpu zamanı harcamaz
 	     
 	     NOT: pointer to pointer demek bir pointer'in adresini istiyor demek.
 	     
 	     örn; void *thread_exit_code;
 	     
 	     pthread_join(tid1,&thread_exit_code);
 	     printf("worker thread exit code:%p\n",thread_exit_code);
 	     
 	     
 	     
	NOT:BIR THREAD BAŞKA BIR THREADI SONLANDIRIRSA pthread_cancel'la ""PTHREAD_CANCELED"" MACROSU SET OLUR VE BU MACROYU KULLANARAK TESPIT YAPABILIRIZ. (-1) thread'in döönüş değeri -1 olur ce macroda -1'e setlenir!!!
		
		pthread_cancel(thd_id_x);	//kullanılırsa  1'e kullanılmazsa 2
	
	     if(thread_exit_code == PTHREAD_CANCELED)
	     	printf("with pthread_canceled\n");		//1
     	     else
     	     	printf("without pthread_cancel\n");		//2
     	     	
     	     	
	*-* int pthread_detach(pthread_t thread); (başarı durumunda sıfır başarısızlık durumunda non-zero değer döndürür.)
	
	örn; pthread_detach(thd_id_x);
	     
	     NOT: Hangi durumda kullanılır-> thread'in geri dönüş değeriyle ilgilenmiyorsak ve join yapmayacaksak thread'in bitmesi beklenmez program sonlandığında thread'de direk sonlanır ve tüm kaynakları iade edilsin sistemi boş yere meşgul etmesin diyoruz thred'i detach duruma sokmak bu anlama gelir.
	     NOT:detach edilmiş bir thread'e join yaparsak başarısız olur.
	     
6-) THREAD SENKRONIZASYONU

	2 task yazma-yazma
	2 task yazma-okuma vb. aklına gelsin
	Bağlı liste örneği
	önemlidir bu senkronizasyonu sağlamak için mutex kullanacağız.
	
7-)MUTEX (Mutual Exclusion)

	-->diğer tasklar mutex'i alamazsa kendini wait kuyruğuna alır.
	
		mutex-var;
			lock(mutex-var);
			cmd;
			cmd;
			unlock(mutex-var);
			
	--> RTOS'taki task enter critical ve semaphore
	
	
	mutex oluşturma;
		öncelikle mutex nesnesi global olmak zorundadır. çünkü threadler aynı mutex değişkenini açıp kapatacaktır.
		
		pthread_mutex_t g_mutex; //global
		
		
		NOT:mutex tasklar create yapılmadan önce oluşturulmalı -> sebebi tasklar direk başlar ve mutex olmadığı için senkronizasyon bozulur.
		
	*-* int pthread_mutex_init(pthread_mutex_t *__mutex,
			       const pthread_mutexattr_t *__mutexattr); (başarı durumunda sıfır döndürür. Başarısızlık durumunda ERROR NUMBER döndürür.)
			       
        *-* int pthread_mutex_lock(pthread_mutex_t *__mutex); (mutex'i lock yapar başarı->0 başarısız ERROR NUMBER)
        *-* int pthread_mutex_unlock(pthread_mutex_t *__mutex); (mutex'i unlock yapar başarı->0 başarısız ERROR NUMBER)
        
        !!!NOT!!! = mutex pthread_mutex_init(); API'ı kullnamadan da init edilebilir.
        	örn; global olarak tanımlanan pthread_mutex_t g_mutex = PTHREAD_MUTEX_INITIALIZER; macrosu kullanılarak ta mutex init edilebilir.
        	
	NOT: mutex'i alamayan thread'ler bloke olur ve wait kuyruğunda beklerler.
        	
        	
	*-* int pthread_mutex_trylock(pthread_mutex_t *mutex); (başarı ->0 başarısız->ERROR NUMBER)
	
	
        
        
       
		
		
		
		
		
		
		


     	     	
     	     	
     	     	

